using SipSavy.Core;
using YoutubeExplode;

namespace SipSavy.Worker.Youtube.Features.ExtractTranscription;

public sealed class ExtractTranscriptionHandler(YoutubeClient youtubeClient)
    : IHandler<ExtractTranscriptionRequest, ExtractTranscriptionResponse>
{
    public async Task<ExtractTranscriptionResponse> Handle(ExtractTranscriptionRequest request,
        CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(request.YoutubeVideoId))
        {
            return new ExtractTranscriptionResponse();
        }

        var trackManifest =
            await youtubeClient.Videos.ClosedCaptions.GetManifestAsync(request.YoutubeVideoId, cancellationToken);

        if (trackManifest.Tracks.Count == 0)
        {
            return new ExtractTranscriptionResponse();
        }

        var track = trackManifest.Tracks.FirstOrDefault(x => x.Language.Code.StartsWith("en") && !x.IsAutoGenerated) ??
                    trackManifest.Tracks.FirstOrDefault(x => x.Language.Code.StartsWith("en")) ??
                    trackManifest.Tracks[0];

        var captions = await youtubeClient.Videos.ClosedCaptions.GetAsync(track, cancellationToken);
        if (captions.Captions.Count == 0)
        {
            return new ExtractTranscriptionResponse();
        }

        return new ExtractTranscriptionResponse
        {
            Language = track.Language.Name,
            LanguageCode = track.Language.Code,
            IsAutoGenerated = track.IsAutoGenerated,
            Transcription = string.Join(" ", captions.Captions.Select(x =>
                    x.Text.Replace("\n", "").Trim()))
                .Replace("  ", " ").Trim()
        };
    }
}